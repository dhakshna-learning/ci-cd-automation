name: "Approval Required"
description: "Manages a single GitHub issue for multi-stage approval"

inputs:
  mode:
    description: "Action mode: create | wait | close"
    required: true
  issue-title:
    description: "Title of the issue"
    required: false
  issue-body:
    description: "Summary/body of the issue"
    required: false
  approvers:
    description: "List of approvers"
    required: false
  secret:
    description: "GitHub token or app secret"
    required: true

runs:
  using: "composite"
  steps:
    - name: Run Approval Logic
      id: approval
      env:
        MODE: ${{ inputs.mode }}
        REPO: ${{ github.repository }}
        PEM: ${{ inputs.secret }}
        ISSUE_TITLE: ${{ inputs['issue-title'] }}
        ISSUE_SUMMARY: ${{ inputs['issue-body'] }}
        APPROVERS: ${{ inputs.approvers }}
      shell: bash
      run: |
        set -euo pipefail
        PEM_KEY="${{ github.action_path }}/secret.pem"
        echo "${{ inputs.secret }}" > "$PEM_KEY"
        chmod 600 "$PEM_KEY"
        chmod +x "${{ github.action_path }}/scripts/generate_token.sh"        
        TOKEN=$("${{ github.action_path }}/scripts/generate_token.sh" "$PEM_KEY")
        echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

        echo "Using token: $TOKEN"

        # if [[ "$MODE" == "create" ]]; then
        #   echo "üìå Creating approval issue..."
        #   TAGGED_APPROVERS=$(echo "$APPROVERS" | sed 's/,/ @/g' | sed 's/^/@/')
        #   DEFAULT_COMMENTS="\nTo approve, comment anything from: approve approved \n\nTo reject, comment anything from: reject rejected stop"

        #   response=$(curl -s -X POST -H "Authorization: token $(generate_token)" \
        #     -H "Accept: application/vnd.github+json" \
        #     -d @- "https://api.github.com/repos/$REPO/issues" <<EOF
        #   {
        #     "title": "$ISSUE_TITLE",
        #     "body": "$ISSUE_SUMMARY\n\n**Approvers:** $TAGGED_APPROVERS\n\n$DEFAULT_COMMENTS"
        #   }
        # EOF
        #   )

        #   issue_number=$(echo "$response" | jq -r '.number')
        #   if [[ -z "$issue_number" || "$issue_number" == "null" ]]; then
        #     echo "‚ùå Failed to create issue: $response"
        #     exit 1
        #   fi

        #   echo "‚úÖ Created issue #$issue_number"
        #   echo "issue-number=$issue_number" >> "$GITHUB_OUTPUT"

        # elif [[ "$MODE" == "wait" ]]; then
        #   echo "‚è≥ Waiting for approval on issue #$ISSUE_NUMBER..."
        #   MAX_WAIT=$((30*60))  # 30 mins
        #   ELAPSED=0
        #   SLEEP_NORMAL=30
        #   SLEEP_ERROR=300

        #   DEFAULT_APPROVALS="approved|approve|yes|done"
        #   APPROVAL_REGEX="^($DEFAULT_APPROVALS)$"
        #   if [[ -n "$ADDITIONAL_APPROVALS" ]]; then
        #     EXTRA_APPROVALS=$(echo "$ADDITIONAL_APPROVALS" | sed 's/,/|/g')
        #     APPROVAL_REGEX="^($DEFAULT_APPROVALS|$EXTRA_APPROVALS)$"
        #   fi

        #   DEFAULT_REJECTIONS="rejected|reject|no|stop"
        #   REJECTION_REGEX="^($DEFAULT_REJECTIONS)$"
        #   if [[ -n "$ADDITIONAL_REJECTIONS" ]]; then
        #     EXTRA_REJECTIONS=$(echo "$ADDITIONAL_REJECTIONS" | sed 's/,/|/g')
        #     REJECTION_REGEX="^($DEFAULT_REJECTIONS|$EXTRA_REJECTIONS)$"
        #   fi

        #   APPROVED="false"
        #   COMMENT_MESSAGE=""
        #   echo -e "Expecting approval from $APPROVERS"

        #   while [ "$ELAPSED" -lt "$MAX_WAIT" ]; do
        #     response=$(curl -s -H "Authorization: token $(generate_token)" \
        #       "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments")

        #     if ! echo "$response" | jq -e . >/dev/null 2>&1; then
        #       echo "‚ùå Failed to parse comments. Retrying in $SLEEP_ERROR seconds..."
        #       echo "API response was: $response"
        #       sleep "$SLEEP_ERROR"
        #       ELAPSED=$((ELAPSED + SLEEP_ERROR))
        #       continue
        #     fi

        #     comments=$(echo "$response" | jq -r '.[] | @base64')

        #     while IFS= read -r encoded_comment; do
        #       comment=$(echo "$encoded_comment" | base64 --decode)
        #       if [[ -z "$encoded_comment" ]]; then
        #         continue
        #       fi
        #       # Validate comment is JSON
        #       if ! echo "$comment" | jq -e 'type == "object"' >/dev/null 2>&1; then
        #         continue
        #       fi

        #       user=$(echo "$comment" | jq -r '.user.login // "unknown"')
        #       body=$(echo "$comment" | jq -r '.body // ""' | tr '[:upper:]' '[:lower:]')

        #       if [ "$user" == "unknown" ]; then
        #         continue
        #       fi

        #       if echo "$APPROVERS" | grep -qi "\\b$user\\b"; then
        #         if echo "$body" | grep -Eiq "$APPROVAL_REGEX"; then
        #           APPROVED="true"
        #           COMMENT_MESSAGE="‚úÖ Approved by @$user"
        #           break 2
        #         elif echo "$body" | grep -Eiq "$REJECTION_REGEX"; then
        #           APPROVED="false"
        #           COMMENT_MESSAGE="‚ùå Rejected by @$user"
        #           break 2
        #         fi
        #       fi
        #     done <<< "$comments"

        #     sleep "$SLEEP_NORMAL"
        #     ELAPSED=$((ELAPSED + SLEEP_NORMAL))
        #   done

        #   if [ "$ELAPSED" -ge "$MAX_WAIT" ] && [ "$APPROVED" == "false" ]; then
        #     echo "‚è± Reached maximum wait without approval."
        #     exit 1
        #   fi

        #   # Add approval/rejection comment
        #   curl -s -X POST -H "Authorization: token $(generate_token)" \
        #     -H "Accept: application/vnd.github+json" \
        #     -d "{\"body\": \"$COMMENT_MESSAGE\"}" \
        #     "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments" >/dev/null

        #   echo "$COMMENT_MESSAGE"
        #   if [ "$APPROVED" == "false" ]; then
        #     exit 1
        #   fi

        # elif [[ "$MODE" == "close" ]]; then
        #   echo "üîí Closing issue #$ISSUE_NUMBER..."
        #   response=$(curl -s -X PATCH -H "Authorization: token $(generate_token)" \
        #     -H "Accept: application/vnd.github+json" \
        #     -d '{"state": "closed"}' \
        #     "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER")
        #   state=$(echo "$response" | jq -r '.state')
        #   if [[ "$state" == "closed" ]]; then
        #     echo "‚úÖ Issue closed successfully"
        #   else
        #     echo "‚ùå Failed to close issue: $response"
        #     exit 1
        #   fi
        # else
        #   echo "‚ùå Unknown mode: $MODE"
        #   exit 1
        # fi
